<?php
/**
 * @file
 * Webform component to integrate Webform + Commerce.
 *
 */

/**
* Implements hook_enable() to provide a new line item type.
*/
// function webform_commerce_enable() {
//   commerce_product_line_item_configuration('webform_commerce');
//   // commerce_line_item_configure_line_item_types();
// }

/**
 * Implements hook_commerce_line_item_type_info().
 *
 * @see hook_commerce_line_item_type_info().
 * @see http://www.drupalcommerce.org/specification/info-hooks/line-item
 *
 */
function webform_commerce_commerce_line_item_type_info() {

  $line_item_types['webform_commerce'] = array(
    'name' => t('Webform fee'),
    'description' => t('Line item type for webform submissions'),
    'product' => TRUE,
    // Here you can change the text in the submit button in the order admin form.
    'add_form_submit_value' => t('Add webform extra charge'),
    'base' => 'commerce_product_line_item',
    'callbacks' => array(
      'title' => 'webform_commerce_line_item_title',
    ),
  );

  return $line_item_types;
}

function webform_commerce_line_item_title($line_item) {
  return $line_item->line_item_label;
}

/**
 * Implements hook_webform_component_info
 */
function webform_commerce_webform_component_info() {
  $components = array();

  $components['commerce'] = array(
    'label' => t('Commerce product'),
    'description' => t('Creates a product during webform submission.'),
    'features' => array(
      'conditional' => FALSE,
      'required' => FALSE,
      'title_display' => FALSE,
    ),
    'file' => 'webform_commerce.component.inc',
  );

  return $components;
}

/**
 * Implements hook_webform_component_info_alter().
 * 
 * Taken directly from webform_pay
 */
function webform_commerce_webform_component_info_alter(&$components) {
  // Allow components of these types to be used as a price field.
  $components['textfield']['features']['price'] = TRUE;
  $components['select']['features']['price'] = TRUE;
  $components['hidden']['features']['price'] = TRUE;
}


/**
 * Implements hook_webform_component_presave().
 */
function webform_commerce_webform_component_presave(&$component) {
  // Create a new product if necessary
  if ($component['type'] == 'commerce') {
    $pricing = $component['extra']['pricing'];
    if ($pricing['type'] === 'new') {
      $new_product = _webform_commerce_create_product($pricing);
      $component['extra']['pricing']['product_to_add'] = $new_product->sku;
      $component['extra']['pricing']['type'] = 'ref';
    }
    unset($component['extra']['product_type']);
    unset($component['extra']['product_title']);
    unset($component['extra']['product_sku']);
    unset($component['extra']['product_price']);
  }
}

/**
 * Create a new product from a webform component
 */
function _webform_commerce_create_product($pricing) {
  // Generate a new product object
  $new_product = commerce_product_new($pricing['product_type']);

  $new_product->status = TRUE;
  $new_product->uid = $GLOBALS['user']->uid;

  $new_product->sku = $pricing['product_sku'];
  $new_product->title = $pricing['product_title'];
  $new_product->created = $new_product->changed = time();

  $price = array(LANGUAGE_NONE => array(0 => array(
    'amount' => $pricing['product_price'] * 100,
    'currency_code' => commerce_default_currency(),
  )));
  
  $new_product->commerce_price = $price;

  commerce_product_save($new_product);
  return $new_product;
}

/**
 * Implements hook_node_load().
 * 
 * Taken directly from webform_pay
 */
function webform_commerce_node_load($nodes, $types) {
  // Quick check to see if we need to do anything at all for these nodes.
  $webform_types = webform_variable_get('webform_node_types');
  if (count(array_intersect($types, $webform_types)) == 0) {
    return;
  }

  // Select all webforms that match these node IDs.
  $result = db_select('webform_component', 'wc')
    ->fields('wc', array('nid', 'cid'))
    ->condition('type', 'commerce')
    ->condition('nid', array_keys($nodes), 'IN')
    ->execute()
    ->fetchAllKeyed();

  foreach ($result as $nid => $cid) {
    $nodes[$nid]->webform_commerce_cid = $cid;
  }
}

/**
 * Implements hook_form_alter().
 * 
 * Inspired by webform_pay
 */
function webform_commerce_form_alter(&$form, &$form_state, $form_id) {
  if (preg_match('/^webform_client_form_\d+$/', $form_id) && isset($form['#node']->webform_commerce_cid)) {

    $node = $form['#node'];

    $commerce_cid = $node->webform_commerce_cid;
    $commerce_comp = $node->webform['components'][$commerce_cid];

    $wfc = "webform_commerce";

    if ($product = commerce_product_load_by_sku($commerce_comp['extra']['pricing']['product_to_add'])) {
      $amount = commerce_product_calculate_sell_price($product);
      $currency_code = $amount['currency_code'];
      $form_state[$wfc]['base_price'] = $amount;
      $form_state[$wfc]['product_id'] = $product->product_id;
    }

    $total = !isset($form_state[$wfc]['total']) ? $amount['amount'] : $form_state[$wfc]['total'];

    // Add a class to add positioning to the form
    $form['#attributes']['class'][] = 'commerce-webform';

    // Check for submission so this is used only on initial webform creation
    if (empty($form['#submission']->sid)) {
      
      // Create the "Total:" and Line Item box
      $form['cost'] = array(
        '#type' => 'container',
      );

      $form['cost']['title'] = array(
        '#type' => 'item',
        '#title' => t('Total:'),
        '#markup' => "<span id='cost_heading'>" . commerce_currency_format($total, $currency_code ) . "</span>",
      );
      
      // add ajax for each price component
      
      foreach ($commerce_comp['extra']['price_components'] as $cid => $enabled) {
        
        if ($enabled && $enabled['expense']) {

          $price_component = $node->webform['components'][$cid];
          $parent_keys = webform_component_parent_keys($node, $price_component);

          foreach ($parent_keys as $form_key) {
            $title = $price_component['name'];
            $options = isset($form_state[$wfc]['options']) ? $form_state[$wfc]['options'] : NULL;
            $value = isset($options[$form_key]['amount']) ? $options[$form_key]['amount'] : (int) 0;

            $form['cost'][$form_key] = array(
              '#type' => 'item',
              '#markup' => "<p>" . $title . ": <span id='{$form_key}'>" . commerce_currency_format($value, $currency_code) . "</span></p>",
            );

            // add ajax to each component that can alter price
            $form['submitted'][$form_key]['#attributes']['class'][] = 'ajax-fix';
            $form['submitted'][$form_key]['#ajax'] = array(
              'callback' => 'webform_commerce_price_adjust', 
              'progress' => array(
                'type' => 'throbber',
                'message' => NULL,
              ),
            );
          }
        }
      }
    }
    
    $form['#after_build'][] = 'webform_commerce_after_build';
    $form['#validate'][] = 'webform_commerce_validate';
    $form['#submit'][] = 'webform_commerce_submit';
  }
}

/**
 * Ajax callback to adjust the price display
 *
 * Called after webform_commerce_validate. Values come via validation
 */
function webform_commerce_price_adjust(&$form, $form_state) {
  $commands = array();

  // Adjust the display of the main "Total"
  $total = $form_state['webform_commerce']['total'];
  $currency_code = $form_state['webform_commerce']['base_price']['currency_code'];

  $amount = commerce_currency_format($total, $currency_code);
  $commands[] = ajax_command_html("#cost_heading", $amount);

  // Adjust the display value of each line item
  $items = $form_state['webform_commerce']['options'];

  foreach($items as $k => $v) {
    $line_item_amount = commerce_currency_format($v['amount'], 'USD');
    $commands[] = ajax_command_html("#". $k, $line_item_amount);
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * After build function for webform_commerce_form_alter.
 *
 * Inspired by webform_pay
 */
function webform_commerce_after_build($form) {

  // If editing a submission, do NOT reprocess add to cart/validate functions.
  if (!empty($form['#submission']->sid)) {
    $submit_index = array_search('webform_commerce_submit', $form['#submit']);
    $validate_index = array_search('webform_commerce_validate', $form['#validate']);

    if ($submit_index !== FALSE) {
      unset($form['#submit'][$submit_index]);
    }
    if ($validate_index !== FALSE) {
      unset($form['#validate'][$validate_index]);
    }
  }

  return $form;
}

/**
 * Validation function for webforms that accept payment information.
 *
 * This is responsible for finding all the price fields within the webform and
 * adding up all the totals. Currently either textfields or select lists may
 * be used for prices.
 * 
 * Inspired by from webform_pay
 */
function webform_commerce_validate(&$form, &$form_state) {
  $node = $form['#node'];
  $commerce_cid = $node->webform_commerce_cid;
  $commerce_component = $node->webform['components'][$commerce_cid];

  // Add up all the components that contain price values.
  $total = $form_state['webform_commerce']['base_price']['amount'];
  
  foreach ($commerce_component['extra']['price_components'] as $cid => $enabled) {
    if ($enabled && $enabled['expense'] == '1') {
      $price_component = $node->webform['components'][$cid];

      // Find the price value if on the current page.
      $price_key = _webform_commerce_component_value($node, $price_component, $form_state['values']['submitted'], TRUE);

      // Find the price value from any previous pages.
      if (empty($price_key) && isset($form_state['storage']['submitted'])) {
        $price_key = _webform_commerce_component_value($node, $price_component, $form_state['storage']['submitted']);
      }

      $form_key = $price_component['form_key'];

      $option_amount = isset($enabled['amount'][$price_key]) ? $enabled['amount'][$price_key] : '';

      $form_state['webform_commerce']['options'][$form_key]['amount'] = (float) $option_amount * 100;
      $form_state['webform_commerce']['options'][$form_key]['details'] = $price_component;
      
      $price_parents = webform_component_parent_keys($node, $price_component);
      
      if (!empty($option_amount) && !is_numeric($option_amount)) {
        form_set_error('submitted][' . implode('][', $price_parents), t('The value for @name needs to be a valid amount.', array('@name' => $price_component['name'])));
      }
      else {
        $total += (float) $option_amount * 100;
      }
    }
  }

  $form_state['webform_commerce']['total'] = $total;

  // Set the total for the webform.
  $form_state['values']['webform_commerce']['total'] = $total;
  $form_state['values']['webform_commerce']['status'] = 'unpaid';

  // Drill down to the commerce form element.
  $parent_keys = webform_component_parent_keys($node, $commerce_component);
  $element = &$form['submitted'];
  foreach ($parent_keys as $form_key) {
    $element = &$element[$form_key];
  }

  if ($element) {
    // Set the component value so that it gets saved into the Webform table.
    form_set_value($element, $form_state['values']['webform_commerce'], $form_state);
  }
}

/**
 * Submit callback to add a product to the cart
 * This is taken straight from commerce_cart_add_to_cart_form_submit
 */

function webform_commerce_submit(&$form, &$form_state) {
  // Only submit the registration if the webform has been fully submitted
  if (!empty($form_state['values']['details']['sid'])) {
    global $user;

    if (isset($form_state['webform_commerce']['product_id'])) {
      // $product_id = $form_state['values']['product_id'];
      $product_id = $form_state['webform_commerce']['product_id'];
      $quantity = '1';
      $combine = FALSE;
    }

    if ($product = commerce_product_load($product_id)) {
      $nid = $form['#node']->nid;
      $sid = $form_state['values']['details']['sid'];
      $data = array(
        'context' => array(
          'display_path' => 'node/' . $nid . '/submission/' . $sid,
        ),
      );
      // Create a new product line item for it.
      $line_item_to_cart = commerce_product_line_item_new($product, $quantity, 0, $data, 'webform_commerce');

      if ($line_item = commerce_cart_product_add($user->uid, $line_item_to_cart, $combine)) {
        $order = commerce_order_load($line_item->order_id);

        // Add webform details to the order. This allows for marking the webform "paid" through rules
        $order->data['webform'][] = array(
          'nid' => $nid,
          'sid' => $sid,
        );

        // Wrap the order to simplify manipulating its field data.
        $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

        if (isset($form_state['webform_commerce']['options'])) {
          foreach ($form_state['webform_commerce']['options'] as $option) {
            if ($option['amount'] > 0) {

              // Add a reference for each pricing option to the main line item
              $line_item->data['webform_price_components'][] = $option;
              commerce_line_item_save($line_item);

            }
          }
        }

        // Save the order again to update its line item reference field.
        commerce_order_save($order);
        drupal_set_message(t('Congrats'), 'status');
      }
      else {
        drupal_set_message(t('%title could not be added to your cart.', array('%title' => $product->title)), 'error');
      }
    }
  }
}

/**
 * Helper function to return the value of a component if it exists.
 *
 * @param $node
 *   The Webform node.
 * @param $component
 *   The Webform component to check for.
 * @param $values
 *   An array of webform values keyed by component ID.
 * @param $nested_tree
 *   Whether or not this function should treat the $values parameter as a tree.
 *   On same-page validation the form value is in a tree. On multiple page forms
 *   or on submission, the values are flattened by Webform.
 *
 * @return
 *   The submitted value of the component, or FALSE if the component was not
 *   contained in $values.
 */
function _webform_commerce_component_value($node, $component, $values, $nested_tree = FALSE) {
  $component_value = FALSE;
  if ($nested_tree) {
    $parent_keys = webform_component_parent_keys($node, $component);
    $component_value = $values;
    foreach ($parent_keys as $form_key) {
      if (isset($component_value[$form_key])) {
        $component_value = $component_value[$form_key];
      }
      else {
        $component_value = FALSE;
        break;
      }
    }
  }
  else {
    $cid = $component['cid'];
    $component_value = isset($values[$cid]) ? $values[$cid] : FALSE;
  }

  return $component_value;
}

function webform_commerce_status_update($sid, $status = 'unpaid') {
  module_load_include('inc', 'webform', 'includes/webform.submissions');

  $submissions = webform_get_submissions(array('sid' => $sid));
  $updated_submission = $submissions[$sid];

  $node = node_load($updated_submission->nid);

  // change field to paid status
  $updated_submission->data[$node->webform_commerce_cid]['value']['status'] = $status;
  webform_submission_update($node, $updated_submission);
}